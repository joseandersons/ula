// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2023 10:34:25"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          projeto_ula
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projeto_ula_vlg_vec_tst();
// constants                                           
// general purpose registers
reg n1_bit0;
reg n1_bit1;
reg n1_bit2;
reg n1_bit3;
reg n1_bit4;
reg n2_bit0;
reg n2_bit1;
reg n2_bit2;
reg n2_bit3;
reg n2_bit4;
reg sel_0;
reg sel_1;
reg sel_2;
// wires                                               
wire a1;
wire a2;
wire b1;
wire b2;
wire c1;
wire c2;
wire d1;
wire d2;
wire e1;
wire e2;
wire f1;
wire f2;
wire g1;
wire g2;
wire overflow;
wire s_a1;
wire s_b1;
wire s_c1;
wire s_d1;
wire s_e1;
wire s_f1;
wire s_g1;
wire sinal;
wire status;

// assign statements (if any)                          
projeto_ula i1 (
// port map - connection between master ports and signals/registers   
	.a1(a1),
	.a2(a2),
	.b1(b1),
	.b2(b2),
	.c1(c1),
	.c2(c2),
	.d1(d1),
	.d2(d2),
	.e1(e1),
	.e2(e2),
	.f1(f1),
	.f2(f2),
	.g1(g1),
	.g2(g2),
	.n1_bit0(n1_bit0),
	.n1_bit1(n1_bit1),
	.n1_bit2(n1_bit2),
	.n1_bit3(n1_bit3),
	.n1_bit4(n1_bit4),
	.n2_bit0(n2_bit0),
	.n2_bit1(n2_bit1),
	.n2_bit2(n2_bit2),
	.n2_bit3(n2_bit3),
	.n2_bit4(n2_bit4),
	.overflow(overflow),
	.s_a1(s_a1),
	.s_b1(s_b1),
	.s_c1(s_c1),
	.s_d1(s_d1),
	.s_e1(s_e1),
	.s_f1(s_f1),
	.s_g1(s_g1),
	.sel_0(sel_0),
	.sel_1(sel_1),
	.sel_2(sel_2),
	.sinal(sinal),
	.status(status)
);
initial 
begin 
#1000000 $finish;
end 

// sel_2
initial
begin
	sel_2 = 1'b0;
end 

// sel_1
initial
begin
	sel_1 = 1'b0;
end 

// sel_0
initial
begin
	sel_0 = 1'b0;
end 

// n1_bit4
initial
begin
	n1_bit4 = 1'b0;
end 

// n1_bit3
initial
begin
	n1_bit3 = 1'b1;
end 

// n1_bit2
initial
begin
	n1_bit2 = 1'b0;
end 

// n1_bit1
initial
begin
	n1_bit1 = 1'b1;
end 

// n1_bit0
initial
begin
	n1_bit0 = 1'b0;
end 

// n2_bit4
initial
begin
	n2_bit4 = 1'b1;
end 

// n2_bit3
initial
begin
	n2_bit3 = 1'b1;
end 

// n2_bit2
initial
begin
	n2_bit2 = 1'b1;
end 

// n2_bit1
initial
begin
	n2_bit1 = 1'b0;
end 

// n2_bit0
initial
begin
	n2_bit0 = 1'b1;
end 
endmodule

